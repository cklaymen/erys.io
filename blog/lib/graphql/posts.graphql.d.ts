/* f3bf6b4e6f197c25b816f737166d7618dfed1a75
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
    DateTime: any;
    /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
    JSON: any;
    /** The `Upload` scalar type represents a file upload. */
    Upload: any;
    /** A time string with format: HH:mm:ss.SSS */
    Time: any;
    /** A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
    Date: any;
    /** The `Long` scalar type represents 52-bit integers */
    Long: any;
};
export declare type Query = {
    __typename?: 'Query';
    post?: Maybe<Post>;
    posts?: Maybe<Array<Maybe<Post>>>;
    postsConnection?: Maybe<PostConnection>;
    tag?: Maybe<Tag>;
    tags?: Maybe<Array<Maybe<Tag>>>;
    tagsConnection?: Maybe<TagConnection>;
    files?: Maybe<Array<Maybe<UploadFile>>>;
    filesConnection?: Maybe<UploadFileConnection>;
    role?: Maybe<UsersPermissionsRole>;
    /** Retrieve all the existing roles. You can't apply filters on this query. */
    roles?: Maybe<Array<Maybe<UsersPermissionsRole>>>;
    rolesConnection?: Maybe<UsersPermissionsRoleConnection>;
    user?: Maybe<UsersPermissionsUser>;
    users?: Maybe<Array<Maybe<UsersPermissionsUser>>>;
    usersConnection?: Maybe<UsersPermissionsUserConnection>;
    me?: Maybe<UsersPermissionsMe>;
};
export declare type QueryPostArgs = {
    id: Scalars['ID'];
};
export declare type QueryPostsArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type QueryPostsConnectionArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type QueryTagArgs = {
    id: Scalars['ID'];
};
export declare type QueryTagsArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type QueryTagsConnectionArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type QueryFilesArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type QueryFilesConnectionArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type QueryRoleArgs = {
    id: Scalars['ID'];
};
export declare type QueryRolesArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type QueryRolesConnectionArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type QueryUserArgs = {
    id: Scalars['ID'];
};
export declare type QueryUsersArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type QueryUsersConnectionArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type Post = {
    __typename?: 'Post';
    id: Scalars['ID'];
    created_at: Scalars['DateTime'];
    updated_at: Scalars['DateTime'];
    title: Scalars['String'];
    content: Scalars['String'];
    user?: Maybe<UsersPermissionsUser>;
    poster?: Maybe<UploadFile>;
    published_at: Scalars['DateTime'];
    description: Scalars['String'];
    created_by?: Maybe<AdminUser>;
    updated_by?: Maybe<AdminUser>;
    tags?: Maybe<Array<Maybe<Tag>>>;
};
export declare type PostTagsArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type UsersPermissionsUser = {
    __typename?: 'UsersPermissionsUser';
    id: Scalars['ID'];
    created_at: Scalars['DateTime'];
    updated_at: Scalars['DateTime'];
    username: Scalars['String'];
    email: Scalars['String'];
    provider?: Maybe<Scalars['String']>;
    confirmed?: Maybe<Scalars['Boolean']>;
    blocked?: Maybe<Scalars['Boolean']>;
    role?: Maybe<UsersPermissionsRole>;
    avatar?: Maybe<UploadFile>;
    created_by?: Maybe<AdminUser>;
    updated_by?: Maybe<AdminUser>;
    posts?: Maybe<Array<Maybe<Post>>>;
};
export declare type UsersPermissionsUserPostsArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type UsersPermissionsRole = {
    __typename?: 'UsersPermissionsRole';
    id: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    created_by?: Maybe<AdminUser>;
    updated_by?: Maybe<AdminUser>;
    permissions?: Maybe<Array<Maybe<UsersPermissionsPermission>>>;
    users?: Maybe<Array<Maybe<UsersPermissionsUser>>>;
};
export declare type UsersPermissionsRolePermissionsArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type UsersPermissionsRoleUsersArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type AdminUser = {
    __typename?: 'AdminUser';
    id: Scalars['ID'];
    username?: Maybe<Scalars['String']>;
};
export declare type UsersPermissionsPermission = {
    __typename?: 'UsersPermissionsPermission';
    id: Scalars['ID'];
    type: Scalars['String'];
    controller: Scalars['String'];
    action: Scalars['String'];
    enabled: Scalars['Boolean'];
    policy?: Maybe<Scalars['String']>;
    role?: Maybe<UsersPermissionsRole>;
    created_by?: Maybe<AdminUser>;
    updated_by?: Maybe<AdminUser>;
};
export declare type UploadFile = {
    __typename?: 'UploadFile';
    id: Scalars['ID'];
    created_at: Scalars['DateTime'];
    updated_at: Scalars['DateTime'];
    name: Scalars['String'];
    alternativeText?: Maybe<Scalars['String']>;
    caption?: Maybe<Scalars['String']>;
    width?: Maybe<Scalars['Int']>;
    height?: Maybe<Scalars['Int']>;
    formats?: Maybe<Scalars['JSON']>;
    hash: Scalars['String'];
    ext?: Maybe<Scalars['String']>;
    mime: Scalars['String'];
    size: Scalars['Float'];
    url: Scalars['String'];
    previewUrl?: Maybe<Scalars['String']>;
    provider: Scalars['String'];
    provider_metadata?: Maybe<Scalars['JSON']>;
    created_by?: Maybe<AdminUser>;
    updated_by?: Maybe<AdminUser>;
    related?: Maybe<Array<Maybe<Morph>>>;
};
export declare type UploadFileRelatedArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Post | PostConnection | PostAggregator | PostGroupBy | PostConnectionId | PostConnectionCreated_At | PostConnectionUpdated_At | PostConnectionTitle | PostConnectionContent | PostConnectionUser | PostConnectionPoster | PostConnectionPublished_At | PostConnectionDescription | PostConnectionCreated_By | PostConnectionUpdated_By | CreatePostPayload | UpdatePostPayload | DeletePostPayload | Tag | TagConnection | TagAggregator | TagGroupBy | TagConnectionId | TagConnectionCreated_At | TagConnectionUpdated_At | TagConnectionName | TagConnectionCreated_By | TagConnectionUpdated_By | CreateTagPayload | UpdateTagPayload | DeleteTagPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_At | UploadFileConnectionUpdated_At | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_Metadata | UploadFileConnectionCreated_By | UploadFileConnectionUpdated_By | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnectionCreated_By | UsersPermissionsRoleConnectionUpdated_By | CreateRolePayload | UpdateRolePayload | DeleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_At | UsersPermissionsUserConnectionUpdated_At | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionAvatar | UsersPermissionsUserConnectionCreated_By | UsersPermissionsUserConnectionUpdated_By | CreateUserPayload | UpdateUserPayload | DeleteUserPayload;
export declare type UsersPermissionsMe = {
    __typename?: 'UsersPermissionsMe';
    id: Scalars['ID'];
    username: Scalars['String'];
    email: Scalars['String'];
    confirmed?: Maybe<Scalars['Boolean']>;
    blocked?: Maybe<Scalars['Boolean']>;
    role?: Maybe<UsersPermissionsMeRole>;
};
export declare type UsersPermissionsMeRole = {
    __typename?: 'UsersPermissionsMeRole';
    id: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
};
export declare type UsersPermissionsLoginPayload = {
    __typename?: 'UsersPermissionsLoginPayload';
    jwt?: Maybe<Scalars['String']>;
    user: UsersPermissionsMe;
};
export declare type UserPermissionsPasswordPayload = {
    __typename?: 'UserPermissionsPasswordPayload';
    ok: Scalars['Boolean'];
};
export declare type PostConnection = {
    __typename?: 'PostConnection';
    values?: Maybe<Array<Maybe<Post>>>;
    groupBy?: Maybe<PostGroupBy>;
    aggregate?: Maybe<PostAggregator>;
};
export declare type PostGroupBy = {
    __typename?: 'PostGroupBy';
    id?: Maybe<Array<Maybe<PostConnectionId>>>;
    created_at?: Maybe<Array<Maybe<PostConnectionCreated_At>>>;
    updated_at?: Maybe<Array<Maybe<PostConnectionUpdated_At>>>;
    title?: Maybe<Array<Maybe<PostConnectionTitle>>>;
    content?: Maybe<Array<Maybe<PostConnectionContent>>>;
    user?: Maybe<Array<Maybe<PostConnectionUser>>>;
    poster?: Maybe<Array<Maybe<PostConnectionPoster>>>;
    published_at?: Maybe<Array<Maybe<PostConnectionPublished_At>>>;
    description?: Maybe<Array<Maybe<PostConnectionDescription>>>;
    created_by?: Maybe<Array<Maybe<PostConnectionCreated_By>>>;
    updated_by?: Maybe<Array<Maybe<PostConnectionUpdated_By>>>;
};
export declare type PostConnectionId = {
    __typename?: 'PostConnectionId';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<PostConnection>;
};
export declare type PostConnectionCreated_At = {
    __typename?: 'PostConnectionCreated_at';
    key?: Maybe<Scalars['DateTime']>;
    connection?: Maybe<PostConnection>;
};
export declare type PostConnectionUpdated_At = {
    __typename?: 'PostConnectionUpdated_at';
    key?: Maybe<Scalars['DateTime']>;
    connection?: Maybe<PostConnection>;
};
export declare type PostConnectionTitle = {
    __typename?: 'PostConnectionTitle';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<PostConnection>;
};
export declare type PostConnectionContent = {
    __typename?: 'PostConnectionContent';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<PostConnection>;
};
export declare type PostConnectionUser = {
    __typename?: 'PostConnectionUser';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<PostConnection>;
};
export declare type PostConnectionPoster = {
    __typename?: 'PostConnectionPoster';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<PostConnection>;
};
export declare type PostConnectionPublished_At = {
    __typename?: 'PostConnectionPublished_at';
    key?: Maybe<Scalars['DateTime']>;
    connection?: Maybe<PostConnection>;
};
export declare type PostConnectionDescription = {
    __typename?: 'PostConnectionDescription';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<PostConnection>;
};
export declare type PostConnectionCreated_By = {
    __typename?: 'PostConnectionCreated_by';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<PostConnection>;
};
export declare type PostConnectionUpdated_By = {
    __typename?: 'PostConnectionUpdated_by';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<PostConnection>;
};
export declare type PostAggregator = {
    __typename?: 'PostAggregator';
    count?: Maybe<Scalars['Int']>;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type CreatePostPayload = {
    __typename?: 'createPostPayload';
    post?: Maybe<Post>;
};
export declare type UpdatePostPayload = {
    __typename?: 'updatePostPayload';
    post?: Maybe<Post>;
};
export declare type DeletePostPayload = {
    __typename?: 'deletePostPayload';
    post?: Maybe<Post>;
};
export declare type Tag = {
    __typename?: 'Tag';
    id: Scalars['ID'];
    created_at: Scalars['DateTime'];
    updated_at: Scalars['DateTime'];
    name: Scalars['String'];
    created_by?: Maybe<AdminUser>;
    updated_by?: Maybe<AdminUser>;
    posts?: Maybe<Array<Maybe<Post>>>;
};
export declare type TagPostsArgs = {
    sort?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    start?: Maybe<Scalars['Int']>;
    where?: Maybe<Scalars['JSON']>;
};
export declare type TagConnection = {
    __typename?: 'TagConnection';
    values?: Maybe<Array<Maybe<Tag>>>;
    groupBy?: Maybe<TagGroupBy>;
    aggregate?: Maybe<TagAggregator>;
};
export declare type TagGroupBy = {
    __typename?: 'TagGroupBy';
    id?: Maybe<Array<Maybe<TagConnectionId>>>;
    created_at?: Maybe<Array<Maybe<TagConnectionCreated_At>>>;
    updated_at?: Maybe<Array<Maybe<TagConnectionUpdated_At>>>;
    name?: Maybe<Array<Maybe<TagConnectionName>>>;
    created_by?: Maybe<Array<Maybe<TagConnectionCreated_By>>>;
    updated_by?: Maybe<Array<Maybe<TagConnectionUpdated_By>>>;
};
export declare type TagConnectionId = {
    __typename?: 'TagConnectionId';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<TagConnection>;
};
export declare type TagConnectionCreated_At = {
    __typename?: 'TagConnectionCreated_at';
    key?: Maybe<Scalars['DateTime']>;
    connection?: Maybe<TagConnection>;
};
export declare type TagConnectionUpdated_At = {
    __typename?: 'TagConnectionUpdated_at';
    key?: Maybe<Scalars['DateTime']>;
    connection?: Maybe<TagConnection>;
};
export declare type TagConnectionName = {
    __typename?: 'TagConnectionName';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<TagConnection>;
};
export declare type TagConnectionCreated_By = {
    __typename?: 'TagConnectionCreated_by';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<TagConnection>;
};
export declare type TagConnectionUpdated_By = {
    __typename?: 'TagConnectionUpdated_by';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<TagConnection>;
};
export declare type TagAggregator = {
    __typename?: 'TagAggregator';
    count?: Maybe<Scalars['Int']>;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type CreateTagPayload = {
    __typename?: 'createTagPayload';
    tag?: Maybe<Tag>;
};
export declare type UpdateTagPayload = {
    __typename?: 'updateTagPayload';
    tag?: Maybe<Tag>;
};
export declare type DeleteTagPayload = {
    __typename?: 'deleteTagPayload';
    tag?: Maybe<Tag>;
};
export declare type UploadFileConnection = {
    __typename?: 'UploadFileConnection';
    values?: Maybe<Array<Maybe<UploadFile>>>;
    groupBy?: Maybe<UploadFileGroupBy>;
    aggregate?: Maybe<UploadFileAggregator>;
};
export declare type UploadFileGroupBy = {
    __typename?: 'UploadFileGroupBy';
    id?: Maybe<Array<Maybe<UploadFileConnectionId>>>;
    created_at?: Maybe<Array<Maybe<UploadFileConnectionCreated_At>>>;
    updated_at?: Maybe<Array<Maybe<UploadFileConnectionUpdated_At>>>;
    name?: Maybe<Array<Maybe<UploadFileConnectionName>>>;
    alternativeText?: Maybe<Array<Maybe<UploadFileConnectionAlternativeText>>>;
    caption?: Maybe<Array<Maybe<UploadFileConnectionCaption>>>;
    width?: Maybe<Array<Maybe<UploadFileConnectionWidth>>>;
    height?: Maybe<Array<Maybe<UploadFileConnectionHeight>>>;
    formats?: Maybe<Array<Maybe<UploadFileConnectionFormats>>>;
    hash?: Maybe<Array<Maybe<UploadFileConnectionHash>>>;
    ext?: Maybe<Array<Maybe<UploadFileConnectionExt>>>;
    mime?: Maybe<Array<Maybe<UploadFileConnectionMime>>>;
    size?: Maybe<Array<Maybe<UploadFileConnectionSize>>>;
    url?: Maybe<Array<Maybe<UploadFileConnectionUrl>>>;
    previewUrl?: Maybe<Array<Maybe<UploadFileConnectionPreviewUrl>>>;
    provider?: Maybe<Array<Maybe<UploadFileConnectionProvider>>>;
    provider_metadata?: Maybe<Array<Maybe<UploadFileConnectionProvider_Metadata>>>;
    created_by?: Maybe<Array<Maybe<UploadFileConnectionCreated_By>>>;
    updated_by?: Maybe<Array<Maybe<UploadFileConnectionUpdated_By>>>;
};
export declare type UploadFileConnectionId = {
    __typename?: 'UploadFileConnectionId';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionCreated_At = {
    __typename?: 'UploadFileConnectionCreated_at';
    key?: Maybe<Scalars['DateTime']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionUpdated_At = {
    __typename?: 'UploadFileConnectionUpdated_at';
    key?: Maybe<Scalars['DateTime']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionName = {
    __typename?: 'UploadFileConnectionName';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionAlternativeText = {
    __typename?: 'UploadFileConnectionAlternativeText';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionCaption = {
    __typename?: 'UploadFileConnectionCaption';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionWidth = {
    __typename?: 'UploadFileConnectionWidth';
    key?: Maybe<Scalars['Int']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionHeight = {
    __typename?: 'UploadFileConnectionHeight';
    key?: Maybe<Scalars['Int']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionFormats = {
    __typename?: 'UploadFileConnectionFormats';
    key?: Maybe<Scalars['JSON']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionHash = {
    __typename?: 'UploadFileConnectionHash';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionExt = {
    __typename?: 'UploadFileConnectionExt';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionMime = {
    __typename?: 'UploadFileConnectionMime';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionSize = {
    __typename?: 'UploadFileConnectionSize';
    key?: Maybe<Scalars['Float']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionUrl = {
    __typename?: 'UploadFileConnectionUrl';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionPreviewUrl = {
    __typename?: 'UploadFileConnectionPreviewUrl';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionProvider = {
    __typename?: 'UploadFileConnectionProvider';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionProvider_Metadata = {
    __typename?: 'UploadFileConnectionProvider_metadata';
    key?: Maybe<Scalars['JSON']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionCreated_By = {
    __typename?: 'UploadFileConnectionCreated_by';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileConnectionUpdated_By = {
    __typename?: 'UploadFileConnectionUpdated_by';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<UploadFileConnection>;
};
export declare type UploadFileAggregator = {
    __typename?: 'UploadFileAggregator';
    count?: Maybe<Scalars['Int']>;
    totalCount?: Maybe<Scalars['Int']>;
    sum?: Maybe<UploadFileAggregatorSum>;
    avg?: Maybe<UploadFileAggregatorAvg>;
    min?: Maybe<UploadFileAggregatorMin>;
    max?: Maybe<UploadFileAggregatorMax>;
};
export declare type UploadFileAggregatorSum = {
    __typename?: 'UploadFileAggregatorSum';
    width?: Maybe<Scalars['Float']>;
    height?: Maybe<Scalars['Float']>;
    size?: Maybe<Scalars['Float']>;
};
export declare type UploadFileAggregatorAvg = {
    __typename?: 'UploadFileAggregatorAvg';
    width?: Maybe<Scalars['Float']>;
    height?: Maybe<Scalars['Float']>;
    size?: Maybe<Scalars['Float']>;
};
export declare type UploadFileAggregatorMin = {
    __typename?: 'UploadFileAggregatorMin';
    width?: Maybe<Scalars['Float']>;
    height?: Maybe<Scalars['Float']>;
    size?: Maybe<Scalars['Float']>;
};
export declare type UploadFileAggregatorMax = {
    __typename?: 'UploadFileAggregatorMax';
    width?: Maybe<Scalars['Float']>;
    height?: Maybe<Scalars['Float']>;
    size?: Maybe<Scalars['Float']>;
};
export declare type UsersPermissionsRoleConnection = {
    __typename?: 'UsersPermissionsRoleConnection';
    values?: Maybe<Array<Maybe<UsersPermissionsRole>>>;
    groupBy?: Maybe<UsersPermissionsRoleGroupBy>;
    aggregate?: Maybe<UsersPermissionsRoleAggregator>;
};
export declare type UsersPermissionsRoleGroupBy = {
    __typename?: 'UsersPermissionsRoleGroupBy';
    id?: Maybe<Array<Maybe<UsersPermissionsRoleConnectionId>>>;
    name?: Maybe<Array<Maybe<UsersPermissionsRoleConnectionName>>>;
    description?: Maybe<Array<Maybe<UsersPermissionsRoleConnectionDescription>>>;
    type?: Maybe<Array<Maybe<UsersPermissionsRoleConnectionType>>>;
    created_by?: Maybe<Array<Maybe<UsersPermissionsRoleConnectionCreated_By>>>;
    updated_by?: Maybe<Array<Maybe<UsersPermissionsRoleConnectionUpdated_By>>>;
};
export declare type UsersPermissionsRoleConnectionId = {
    __typename?: 'UsersPermissionsRoleConnectionId';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<UsersPermissionsRoleConnection>;
};
export declare type UsersPermissionsRoleConnectionName = {
    __typename?: 'UsersPermissionsRoleConnectionName';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<UsersPermissionsRoleConnection>;
};
export declare type UsersPermissionsRoleConnectionDescription = {
    __typename?: 'UsersPermissionsRoleConnectionDescription';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<UsersPermissionsRoleConnection>;
};
export declare type UsersPermissionsRoleConnectionType = {
    __typename?: 'UsersPermissionsRoleConnectionType';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<UsersPermissionsRoleConnection>;
};
export declare type UsersPermissionsRoleConnectionCreated_By = {
    __typename?: 'UsersPermissionsRoleConnectionCreated_by';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<UsersPermissionsRoleConnection>;
};
export declare type UsersPermissionsRoleConnectionUpdated_By = {
    __typename?: 'UsersPermissionsRoleConnectionUpdated_by';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<UsersPermissionsRoleConnection>;
};
export declare type UsersPermissionsRoleAggregator = {
    __typename?: 'UsersPermissionsRoleAggregator';
    count?: Maybe<Scalars['Int']>;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type CreateRolePayload = {
    __typename?: 'createRolePayload';
    role?: Maybe<UsersPermissionsRole>;
};
export declare type UpdateRolePayload = {
    __typename?: 'updateRolePayload';
    role?: Maybe<UsersPermissionsRole>;
};
export declare type DeleteRolePayload = {
    __typename?: 'deleteRolePayload';
    role?: Maybe<UsersPermissionsRole>;
};
export declare type UsersPermissionsUserConnection = {
    __typename?: 'UsersPermissionsUserConnection';
    values?: Maybe<Array<Maybe<UsersPermissionsUser>>>;
    groupBy?: Maybe<UsersPermissionsUserGroupBy>;
    aggregate?: Maybe<UsersPermissionsUserAggregator>;
};
export declare type UsersPermissionsUserGroupBy = {
    __typename?: 'UsersPermissionsUserGroupBy';
    id?: Maybe<Array<Maybe<UsersPermissionsUserConnectionId>>>;
    created_at?: Maybe<Array<Maybe<UsersPermissionsUserConnectionCreated_At>>>;
    updated_at?: Maybe<Array<Maybe<UsersPermissionsUserConnectionUpdated_At>>>;
    username?: Maybe<Array<Maybe<UsersPermissionsUserConnectionUsername>>>;
    email?: Maybe<Array<Maybe<UsersPermissionsUserConnectionEmail>>>;
    provider?: Maybe<Array<Maybe<UsersPermissionsUserConnectionProvider>>>;
    confirmed?: Maybe<Array<Maybe<UsersPermissionsUserConnectionConfirmed>>>;
    blocked?: Maybe<Array<Maybe<UsersPermissionsUserConnectionBlocked>>>;
    role?: Maybe<Array<Maybe<UsersPermissionsUserConnectionRole>>>;
    avatar?: Maybe<Array<Maybe<UsersPermissionsUserConnectionAvatar>>>;
    created_by?: Maybe<Array<Maybe<UsersPermissionsUserConnectionCreated_By>>>;
    updated_by?: Maybe<Array<Maybe<UsersPermissionsUserConnectionUpdated_By>>>;
};
export declare type UsersPermissionsUserConnectionId = {
    __typename?: 'UsersPermissionsUserConnectionId';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<UsersPermissionsUserConnection>;
};
export declare type UsersPermissionsUserConnectionCreated_At = {
    __typename?: 'UsersPermissionsUserConnectionCreated_at';
    key?: Maybe<Scalars['DateTime']>;
    connection?: Maybe<UsersPermissionsUserConnection>;
};
export declare type UsersPermissionsUserConnectionUpdated_At = {
    __typename?: 'UsersPermissionsUserConnectionUpdated_at';
    key?: Maybe<Scalars['DateTime']>;
    connection?: Maybe<UsersPermissionsUserConnection>;
};
export declare type UsersPermissionsUserConnectionUsername = {
    __typename?: 'UsersPermissionsUserConnectionUsername';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<UsersPermissionsUserConnection>;
};
export declare type UsersPermissionsUserConnectionEmail = {
    __typename?: 'UsersPermissionsUserConnectionEmail';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<UsersPermissionsUserConnection>;
};
export declare type UsersPermissionsUserConnectionProvider = {
    __typename?: 'UsersPermissionsUserConnectionProvider';
    key?: Maybe<Scalars['String']>;
    connection?: Maybe<UsersPermissionsUserConnection>;
};
export declare type UsersPermissionsUserConnectionConfirmed = {
    __typename?: 'UsersPermissionsUserConnectionConfirmed';
    key?: Maybe<Scalars['Boolean']>;
    connection?: Maybe<UsersPermissionsUserConnection>;
};
export declare type UsersPermissionsUserConnectionBlocked = {
    __typename?: 'UsersPermissionsUserConnectionBlocked';
    key?: Maybe<Scalars['Boolean']>;
    connection?: Maybe<UsersPermissionsUserConnection>;
};
export declare type UsersPermissionsUserConnectionRole = {
    __typename?: 'UsersPermissionsUserConnectionRole';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<UsersPermissionsUserConnection>;
};
export declare type UsersPermissionsUserConnectionAvatar = {
    __typename?: 'UsersPermissionsUserConnectionAvatar';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<UsersPermissionsUserConnection>;
};
export declare type UsersPermissionsUserConnectionCreated_By = {
    __typename?: 'UsersPermissionsUserConnectionCreated_by';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<UsersPermissionsUserConnection>;
};
export declare type UsersPermissionsUserConnectionUpdated_By = {
    __typename?: 'UsersPermissionsUserConnectionUpdated_by';
    key?: Maybe<Scalars['ID']>;
    connection?: Maybe<UsersPermissionsUserConnection>;
};
export declare type UsersPermissionsUserAggregator = {
    __typename?: 'UsersPermissionsUserAggregator';
    count?: Maybe<Scalars['Int']>;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type CreateUserPayload = {
    __typename?: 'createUserPayload';
    user?: Maybe<UsersPermissionsUser>;
};
export declare type UpdateUserPayload = {
    __typename?: 'updateUserPayload';
    user?: Maybe<UsersPermissionsUser>;
};
export declare type DeleteUserPayload = {
    __typename?: 'deleteUserPayload';
    user?: Maybe<UsersPermissionsUser>;
};
export declare type Mutation = {
    __typename?: 'Mutation';
    createPost?: Maybe<CreatePostPayload>;
    updatePost?: Maybe<UpdatePostPayload>;
    deletePost?: Maybe<DeletePostPayload>;
    createTag?: Maybe<CreateTagPayload>;
    updateTag?: Maybe<UpdateTagPayload>;
    deleteTag?: Maybe<DeleteTagPayload>;
    /** Create a new role */
    createRole?: Maybe<CreateRolePayload>;
    /** Update an existing role */
    updateRole?: Maybe<UpdateRolePayload>;
    /** Delete an existing role */
    deleteRole?: Maybe<DeleteRolePayload>;
    /** Create a new user */
    createUser?: Maybe<CreateUserPayload>;
    /** Update an existing user */
    updateUser?: Maybe<UpdateUserPayload>;
    /** Delete an existing user */
    deleteUser?: Maybe<DeleteUserPayload>;
    upload: UploadFile;
    multipleUpload: Array<Maybe<UploadFile>>;
    login: UsersPermissionsLoginPayload;
    register: UsersPermissionsLoginPayload;
    forgotPassword?: Maybe<UserPermissionsPasswordPayload>;
    resetPassword?: Maybe<UsersPermissionsLoginPayload>;
    emailConfirmation?: Maybe<UsersPermissionsLoginPayload>;
};
export declare type MutationCreatePostArgs = {
    input?: Maybe<CreatePostInput>;
};
export declare type MutationUpdatePostArgs = {
    input?: Maybe<UpdatePostInput>;
};
export declare type MutationDeletePostArgs = {
    input?: Maybe<DeletePostInput>;
};
export declare type MutationCreateTagArgs = {
    input?: Maybe<CreateTagInput>;
};
export declare type MutationUpdateTagArgs = {
    input?: Maybe<UpdateTagInput>;
};
export declare type MutationDeleteTagArgs = {
    input?: Maybe<DeleteTagInput>;
};
export declare type MutationCreateRoleArgs = {
    input?: Maybe<CreateRoleInput>;
};
export declare type MutationUpdateRoleArgs = {
    input?: Maybe<UpdateRoleInput>;
};
export declare type MutationDeleteRoleArgs = {
    input?: Maybe<DeleteRoleInput>;
};
export declare type MutationCreateUserArgs = {
    input?: Maybe<CreateUserInput>;
};
export declare type MutationUpdateUserArgs = {
    input?: Maybe<UpdateUserInput>;
};
export declare type MutationDeleteUserArgs = {
    input?: Maybe<DeleteUserInput>;
};
export declare type MutationUploadArgs = {
    refId?: Maybe<Scalars['ID']>;
    ref?: Maybe<Scalars['String']>;
    field?: Maybe<Scalars['String']>;
    source?: Maybe<Scalars['String']>;
    file: Scalars['Upload'];
};
export declare type MutationMultipleUploadArgs = {
    refId?: Maybe<Scalars['ID']>;
    ref?: Maybe<Scalars['String']>;
    field?: Maybe<Scalars['String']>;
    source?: Maybe<Scalars['String']>;
    files: Array<Maybe<Scalars['Upload']>>;
};
export declare type MutationLoginArgs = {
    input: UsersPermissionsLoginInput;
};
export declare type MutationRegisterArgs = {
    input: UsersPermissionsRegisterInput;
};
export declare type MutationForgotPasswordArgs = {
    email: Scalars['String'];
};
export declare type MutationResetPasswordArgs = {
    password: Scalars['String'];
    passwordConfirmation: Scalars['String'];
    code: Scalars['String'];
};
export declare type MutationEmailConfirmationArgs = {
    confirmation: Scalars['String'];
};
export declare type CreatePostInput = {
    data?: Maybe<PostInput>;
};
export declare type PostInput = {
    title: Scalars['String'];
    content: Scalars['String'];
    user?: Maybe<Scalars['ID']>;
    poster?: Maybe<Scalars['ID']>;
    published_at: Scalars['DateTime'];
    tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
    description: Scalars['String'];
    created_by?: Maybe<Scalars['ID']>;
    updated_by?: Maybe<Scalars['ID']>;
};
export declare type UpdatePostInput = {
    where?: Maybe<InputId>;
    data?: Maybe<EditPostInput>;
};
export declare type InputId = {
    id: Scalars['ID'];
};
export declare type EditPostInput = {
    title?: Maybe<Scalars['String']>;
    content?: Maybe<Scalars['String']>;
    user?: Maybe<Scalars['ID']>;
    poster?: Maybe<Scalars['ID']>;
    published_at?: Maybe<Scalars['DateTime']>;
    tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
    description?: Maybe<Scalars['String']>;
    created_by?: Maybe<Scalars['ID']>;
    updated_by?: Maybe<Scalars['ID']>;
};
export declare type DeletePostInput = {
    where?: Maybe<InputId>;
};
export declare type CreateTagInput = {
    data?: Maybe<TagInput>;
};
export declare type TagInput = {
    name: Scalars['String'];
    posts?: Maybe<Array<Maybe<Scalars['ID']>>>;
    created_by?: Maybe<Scalars['ID']>;
    updated_by?: Maybe<Scalars['ID']>;
};
export declare type UpdateTagInput = {
    where?: Maybe<InputId>;
    data?: Maybe<EditTagInput>;
};
export declare type EditTagInput = {
    name?: Maybe<Scalars['String']>;
    posts?: Maybe<Array<Maybe<Scalars['ID']>>>;
    created_by?: Maybe<Scalars['ID']>;
    updated_by?: Maybe<Scalars['ID']>;
};
export declare type DeleteTagInput = {
    where?: Maybe<InputId>;
};
export declare type CreateRoleInput = {
    data?: Maybe<RoleInput>;
};
export declare type RoleInput = {
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    permissions?: Maybe<Array<Maybe<Scalars['ID']>>>;
    users?: Maybe<Array<Maybe<Scalars['ID']>>>;
    created_by?: Maybe<Scalars['ID']>;
    updated_by?: Maybe<Scalars['ID']>;
};
export declare type UpdateRoleInput = {
    where?: Maybe<InputId>;
    data?: Maybe<EditRoleInput>;
};
export declare type EditRoleInput = {
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    permissions?: Maybe<Array<Maybe<Scalars['ID']>>>;
    users?: Maybe<Array<Maybe<Scalars['ID']>>>;
    created_by?: Maybe<Scalars['ID']>;
    updated_by?: Maybe<Scalars['ID']>;
};
export declare type DeleteRoleInput = {
    where?: Maybe<InputId>;
};
export declare type CreateUserInput = {
    data?: Maybe<UserInput>;
};
export declare type UserInput = {
    username: Scalars['String'];
    email: Scalars['String'];
    provider?: Maybe<Scalars['String']>;
    password?: Maybe<Scalars['String']>;
    resetPasswordToken?: Maybe<Scalars['String']>;
    confirmed?: Maybe<Scalars['Boolean']>;
    blocked?: Maybe<Scalars['Boolean']>;
    role?: Maybe<Scalars['ID']>;
    posts?: Maybe<Array<Maybe<Scalars['ID']>>>;
    avatar?: Maybe<Scalars['ID']>;
    created_by?: Maybe<Scalars['ID']>;
    updated_by?: Maybe<Scalars['ID']>;
};
export declare type UpdateUserInput = {
    where?: Maybe<InputId>;
    data?: Maybe<EditUserInput>;
};
export declare type EditUserInput = {
    username?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
    provider?: Maybe<Scalars['String']>;
    password?: Maybe<Scalars['String']>;
    resetPasswordToken?: Maybe<Scalars['String']>;
    confirmed?: Maybe<Scalars['Boolean']>;
    blocked?: Maybe<Scalars['Boolean']>;
    role?: Maybe<Scalars['ID']>;
    posts?: Maybe<Array<Maybe<Scalars['ID']>>>;
    avatar?: Maybe<Scalars['ID']>;
    created_by?: Maybe<Scalars['ID']>;
    updated_by?: Maybe<Scalars['ID']>;
};
export declare type DeleteUserInput = {
    where?: Maybe<InputId>;
};
export declare type UsersPermissionsLoginInput = {
    identifier: Scalars['String'];
    password: Scalars['String'];
    provider?: Maybe<Scalars['String']>;
};
export declare type UsersPermissionsRegisterInput = {
    username: Scalars['String'];
    email: Scalars['String'];
    password: Scalars['String'];
};
export declare type FileInput = {
    name: Scalars['String'];
    alternativeText?: Maybe<Scalars['String']>;
    caption?: Maybe<Scalars['String']>;
    width?: Maybe<Scalars['Int']>;
    height?: Maybe<Scalars['Int']>;
    formats?: Maybe<Scalars['JSON']>;
    hash: Scalars['String'];
    ext?: Maybe<Scalars['String']>;
    mime: Scalars['String'];
    size: Scalars['Float'];
    url: Scalars['String'];
    previewUrl?: Maybe<Scalars['String']>;
    provider: Scalars['String'];
    provider_metadata?: Maybe<Scalars['JSON']>;
    related?: Maybe<Array<Maybe<Scalars['ID']>>>;
    created_by?: Maybe<Scalars['ID']>;
    updated_by?: Maybe<Scalars['ID']>;
};
export declare type EditFileInput = {
    name?: Maybe<Scalars['String']>;
    alternativeText?: Maybe<Scalars['String']>;
    caption?: Maybe<Scalars['String']>;
    width?: Maybe<Scalars['Int']>;
    height?: Maybe<Scalars['Int']>;
    formats?: Maybe<Scalars['JSON']>;
    hash?: Maybe<Scalars['String']>;
    ext?: Maybe<Scalars['String']>;
    mime?: Maybe<Scalars['String']>;
    size?: Maybe<Scalars['Float']>;
    url?: Maybe<Scalars['String']>;
    previewUrl?: Maybe<Scalars['String']>;
    provider?: Maybe<Scalars['String']>;
    provider_metadata?: Maybe<Scalars['JSON']>;
    related?: Maybe<Array<Maybe<Scalars['ID']>>>;
    created_by?: Maybe<Scalars['ID']>;
    updated_by?: Maybe<Scalars['ID']>;
};
export declare enum CacheControlScope {
    Public = "PUBLIC",
    Private = "PRIVATE"
}
export declare type PostsQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type PostsQuery = ({
    __typename?: 'Query';
} & {
    posts?: Maybe<Array<Maybe<({
        __typename?: 'Post';
    } & Pick<Post, 'title' | 'published_at' | 'description'> & {
        user?: Maybe<({
            __typename?: 'UsersPermissionsUser';
        } & Pick<UsersPermissionsUser, 'id' | 'username'> & {
            avatar?: Maybe<({
                __typename?: 'UploadFile';
            } & Pick<UploadFile, 'url'>)>;
        })>;
        poster?: Maybe<({
            __typename?: 'UploadFile';
        } & Pick<UploadFile, 'url'>)>;
        tags?: Maybe<Array<Maybe<({
            __typename?: 'Tag';
        } & Pick<Tag, 'name'>)>>>;
    })>>>;
});
export declare const PostsDocument: Apollo.DocumentNode;
/**
 * __usePostsQuery__
 *
 * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.
 * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePostsQuery({
 *   variables: {
 *   },
 * });
 */
export declare function usePostsQuery(baseOptions?: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>): Apollo.QueryResult<PostsQuery, Exact<{
    [key: string]: never;
}>>;
export declare function usePostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>): Apollo.QueryTuple<PostsQuery, Exact<{
    [key: string]: never;
}>>;
export declare type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;
export declare type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;
export declare type PostsQueryResult = Apollo.QueryResult<PostsQuery, PostsQueryVariables>;
